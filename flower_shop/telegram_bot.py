import asyncio
from asgiref.sync import sync_to_async
from django.db.models import Sum
from django.utils.timezone import localtime, now
from telegram.ext import CommandHandler, CallbackContext, Application
from telegram import Update
from .models import Order
import requests
import logging
from django.conf import settings
import json

logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self, token):
        self.token = token
        self.base_url = f"https://api.telegram.org/bot{token}"
        self.session = requests.Session()

    def send_message(self, chat_id, text):
        """ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram """
        url = f"{self.base_url}/sendMessage"
        data = {"chat_id": chat_id, "text": text, "parse_mode": "Markdown"}
        try:
            response = self.session.post(url, json=data, timeout=10)
            response.raise_for_status()
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

    def send_photos(self, chat_id, photo_paths, caption=""):
        """ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª—å–±–æ–º–∞ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ –≤ Telegram """
        if not photo_paths:
            self.send_message(chat_id, caption)
            return

        url = f"{self.base_url}/sendMediaGroup"
        media = []
        files = {}

        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            for i, photo_path in enumerate(photo_paths):
                file_key = f"photo{i}"
                files[file_key] = open(photo_path, "rb")  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                media.append({
                    "type": "photo",
                    "media": f"attach://{file_key}",
                    "caption": caption if i == 0 else ""  # –ü–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ
                })

            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –≤ Telegram: {json.dumps(media, ensure_ascii=False)}")

            response = self.session.post(
                url,
                data={"chat_id": chat_id, "media": json.dumps(media)},  # <-- –ü–µ—Ä–µ–¥–∞—ë–º `media` –∫–∞–∫ JSON-—Å—Ç—Ä–æ–∫—É
                files=files,
                timeout=10
            )

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç Telegram
            logger.info(f"–û—Ç–≤–µ—Ç Telegram: {response.status_code} - {response.text}")

            response.raise_for_status()

        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ Telegram: {e}")
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            for file in files.values():
                file.close()

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç Telegram-–±–æ—Ç–∞
telegram_bot = TelegramBot(settings.TELEGRAM_BOT_TOKEN)

@sync_to_async
def get_daily_analytics():
    """ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –∑–∞–∫–∞–∑–∞–º –∑–∞ –¥–µ–Ω—å """
    today = localtime(now()).date()
    orders_today = Order.objects.filter(order_date__date=today)

    total_orders = orders_today.count()
    total_income = orders_today.aggregate(total_income=Sum('orderitem__product__price'))['total_income'] or 0

    return total_orders, total_income

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analytics
async def analytics_command(update: Update, context: CallbackContext):
    if str(update.message.chat_id) != str(settings.TELEGRAM_ADMIN_CHAT_ID):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.")
        return

    total_orders, total_income = await get_daily_analytics()

    message = (
        f"üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n"
        f"üõí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
        f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_income:.2f} —Ä—É–±."
    )

    await update.message.reply_text(message, parse_mode="Markdown")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
def add_handlers(application):
    application.add_handler(CommandHandler("analytics", analytics_command))

# –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()
add_handlers(application)

def start_bot():
    """ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–±—ã—Ç–∏–π """
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(application.run_polling(drop_pending_updates=True, timeout=10))
